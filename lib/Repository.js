// Generated by CoffeeScript 2.3.0
// TODO: Add missing methods
var GitRepository, assertValid, git;

assertValid = require("assertValid");

git = {};

GitRepository = class GitRepository {
  constructor(path) {
    this.path = path;
    assertValid(this.path, "string");
    this._head = null;
    this._branch = null;
    this._clean = null;
    this._staged = null;
  }

  isClean() {
    git.isClean || (git.isClean = require("git-utils/lib/isClean"));
    return this._clean || (this._clean = git.isClean(this.path));
  }

  isStaged() {
    git.isStaged || (git.isStaged = require("git-utils/lib/isStaged"));
    return this._staged || (this._staged = git.isStaged(this.path));
  }

  stageFiles(files) {
    this._staged = null;
    git.stageFiles || (git.stageFiles = require("git-utils/lib/stageFiles"));
    return git.stageFiles(this.path, files);
  }

  commit(message) {
    this._clean = this._staged = null;
    git.commit || (git.commit = require("git-utils/lib/commit"));
    return git.commit(this.path, message);
  }

  getHead(branch, opts) {
    git.getHead || (git.getHead = require("git-utils/lib/getHead"));
    return this._head || (this._head = git.getHead(this.path, branch, opts));
  }

  hasBranch(branch, opts) {
    git.hasBranch || (git.hasBranch = require("git-utils/lib/hasBranch"));
    return git.hasBranch(this.path, branch, opts);
  }

  getBranch() {
    git.getBranch || (git.getBranch = require("git-utils/lib/getBranch"));
    return this._branch || (this._branch = git.getBranch(this.path));
  }

  getBranches(remote, opts) {
    git.getBranches || (git.getBranches = require("git-utils/lib/getBranches"));
    return git.getBranches(this.path, remote, opts);
  }

  setBranch(branch, opts) {
    git.setBranch || (git.setBranch = require("git-utils/lib/setBranch"));
    return this._branch = git.setBranch(this.path, branch, opts);
  }

  async addBranch(branch) {
    git.addBranch || (git.addBranch = require("git-utils/lib/addBranch"));
    await git.addBranch(this.path, branch);
    this._branch = Promise.resolve(branch);
  }

  pushBranch(opts) {
    git.pushBranch || (git.pushBranch = require("git-utils/lib/pushBranch"));
    return git.pushBranch(this.path, opts);
  }

  deleteBranch(branch, opts) {
    git.deleteBranch || (git.deleteBranch = require("git-utils/lib/deleteBranch"));
    return git.deleteBranch(this.path, branch, opts);
  }

  resetBranch(commit, opts) {
    this._clean = null;
    git.resetBranch || (git.resetBranch = require("git-utils/lib/resetBranch"));
    return git.resetBranch(this.path, commit, opts);
  }

  addTag(tag, opts) {
    git.addTag || (git.addTag = require("git-utils/lib/addTag"));
    return git.addTag(this.path, tag, opts);
  }

  deleteTag(tag, opts) {
    git.deleteTag || (git.deleteTag = require("git-utils/lib/deleteTag"));
    return git.deleteTag(this.path, tag, opts);
  }

};

module.exports = GitRepository;
